use tonic::{Request, Response};

// Importing custom gRPC module (auto generated by .proto file and build.rs)
pub mod pingooser {
    tonic::include_proto!("pingoose");
}

// importing gRPC client (auto generated struct)
pub use pingooser::pin_goose_client::PinGooseClient;
// importing gRPC server (auto generated struct), and server interface
pub use pingooser::pin_goose_server::{PinGoose, PinGooseServer};
use pingooser::Resp;

#[derive(Debug, Default)]
pub struct PinGooser {}

#[tonic::async_trait]
impl PinGoose for PinGooser {
    // ping with server time response
    async fn ping(&self, _: Request<()>) -> Result<Response<Resp>, tonic::Status> {
        let now = chrono::Utc::now().format("%b %-d, %-I:%M").to_string();

        Ok(Response::new(pingooser::Resp { resp: now }))
    }

    // ping without any response
    async fn ping_simple(
        &self,
        _: tonic::Request<()>,
    ) -> Result<tonic::Response<()>, tonic::Status> {
        Ok(Response::new(()))
    }
}
